extends sdoc.pug
block append variable
    -
        title=sdoc_title
        firstword=sdoc_tutorial_firstword
        topmenu=sdoc_tutorial_topmenu
block append Breadcrumb
    a.text(href=sdoc_tutorial_url) #{sdoc_tutorial_name} 

block Main
    section
        h3 はじめに
        p 初学者用のプログラミングのテキストの多くは、プログラミングの基礎概念は理解した前提での説明が多いように思う。つまり、他の何かしらの言語は習得積みで、この言語は初じめてだ、という初心者向けである。あくまでのその言語の初心者であって、プログラミングの初心者向けではない、ということである。プログラミングをかじっているものなら常識的に知っている基礎中の基礎の概念を説明してくれているテキストに対しては、親切だなと感じてしまう。これが現在のプログラミングの学習環境のレベルである。独学可能であると、さんざ言われるが、０からの出発は本当に骨の折れる作業だ。けれども、一度ある程度の基礎概念さえ理解しさえすれば、ネットや参考書で書かれている内容も読めるようになり、スムーズに独学ができるようになるのである。この#{sdoc_tutorial_name} では、基礎概念の説明を中心とし、プログラミング初学者がスムーズなスタートダッシュを切れるようにすることが目的だ。
    section
        h3 どの言語を初めに勉強すべきか？
        p そのまえにまず、プログラミング言語は、宗教論争が絶えないこと、消耗品であることについて話しておきたい。「どの言語を初めに勉強すべきか？」という議題で、複数のプログラミング経験者で話し合ったところで、おそらく永遠に一つの答えにまとまることは無いだろう。プログラミング界隈では、自分の使っている言語が一番だ！という宗教論争が絶えないのだ。けれども、所詮、どのように優れたプログラミング言語も何かを作り出すためのツールに過ぎない。それぞれ言語ごとに得意不得意がある。大切なことは、適したプログラミング言語を選択することだ。さらには、プログラミング言語は一生使えるような代物ではなく、寿命が存在する。時代の進化とともに、さらに高性能な、改善が施された新たなプログラミング言語が生まれてくるからだ。１つのプログラミング言語に固執したところでメリットは無い。今使っているものより優れたものが出現したのならさっさと、鞍替えした方が良い。プログラミング言語もある程度寿命は長いものの、使い捨ての道具の1つなのだ。少し大げさかもしれないが、いまだに「windows xp」を使うような人や会社があると聞くが、馬鹿としか言いようがない。時代遅れとなってしまった技術に固執することは、セキュリテイや利便性の面からみてもいいことは何一つないのだ。
    section
        h3 Bashを覚えよう
        p 初学者はどの言語を初めに覚えるべきか？私がたどり着いた答えがBashだ。何かプログラミング言語を使って、アプリケーションを開発しようとした時にはもちろん、プログラミング言語以外の知識が必要になってくる。プログラミング言語なんてのは全体のほんの一部に過ぎない。1か月程度で、プログラミング言語の使い方を覚えたところで、企業の実務に参加するなど、ほぼ不可能だと思って相違ない。逆にそのようなことを謳っているスクールや会社は怪しさ満点なので、健全な職場にありつけるなど夢にも思ってはいけない。OS、ネットワーク、通信、セキュリティ、データベースなど、把握しておかないといけないことがたくさんあるのだ。とりわけBashはこの中のOSと深く関わりのある言語である。どのようなサーバーコンピューターやパーソナルコンピューターであっても、コンピュータが動作するのに欠かせないソフトウェアがOSなのだ。この点も、初学者にBashが良い理由である。私が思うBashの利点をまとめてみると、
        ul
            li OSの役割を覚えるのにちょうどいい
            li CUIに慣れるのにちょうどいい・・・CUI（読み方：クイ）とは、コマンドの入力により、パソコンを操作すること、と思ってもらって構わない。正確にはインターフェースのことを指すのだが、インターフェースの概念を今の時点で掴む必要は無く、説明が難しい概念の一つだからだ。対照的な概念として、GUI（読み方：グイ）がある。
            li OSである、Linux、Macに初めから付属されている（windowsはGitをインストールすれば利用可能）・・・準備が簡単
            li スクリプト言語である ・・・ スクリプト言語は手軽に利用できるので初学者向きである、というのが一般的な見解である。
            li 多くの開発者が普段使いで利用する言語である（普段の作業の自動化にも利用される）・・・　ファイルの作成、コピー、削除、フォルダの作成、移動...etc
            li 言語としての寿命が長い・・・Bashの役割上、代替え言語や上位互換の言語があらわれにくい。
            li Web業界、SIer業界、個人開発、どのような業界でも利用されている・・・webサービスのサーバーコンピューターに搭載するOSとしてLinuxが広く普及していること、webアプリの開発用のパーソナルコンピューターとしてMacが広く普及していることがあげられる。
            li 古い言語なので、決して書きやすくはないが、基礎概念を理解する上では有意に働く。
        p などがある。まあ覚えるといっても、深くまでは掘り下げない。私人身、Bashに精通しているわけではないし、今の時点では、Bashを深く勉強する必要があるかどうかは判断できない。人によって方向性が変わるからだ。いくら広く活用されているとはいえ、Bashを全然使わない職場やポジションにつく可能性もある。そのようなことも考慮すると、今の時点では、利用頻度の高い操作のみ覚えれば充分だ。また、言語自体は古いので、複雑な処理を記述しにくく、途端にハードルが高くなってしまうのも理由の一つだ。
    section
        h3 さっそく開発環境を構築しよう
        p ソフトウェアを開発するときは、今、目の前にあるようなパーソナルコンピューターを利用する。そのときに利用するパーソナルコンピューターのことを開発環境と呼ぶ。「開発環境を構築する」の具体的な内容は、開発効率を上げるためのアプリケーション、プログラミング言語、データベース、その他ミドルウェアなどをインストールし、初期設定など実施すること、である。今回はその中から、開発効率を上げるためのアプリケーションのインストールと、プログラミング言語のインストールだけを行う。もっと具体的にいうと、
        ol
            li Visual Studio Codeのインストール・・・ソフトウェアの開発では必ず、IDE（統合開発環境）やエディターと呼ばれるアプリケーションを利用する。両方とも、めちゃくちゃ高性能で複数の便利な機能が搭載された「メモ帳」だと思ってもらってOK。テキストを記入するためのアプリケーションだ。今回は、これを利用してBashを書いていく。無料で利用でき、煩雑な初期設定の手間もなく、動作も快適なので気に入っているエディターだ。
            li Gitのインストール ※MacにはBashが元々インストールされているので、Windowsの人だけ行う。GitをインストールするとGit Bashというアプリケーションも一緒にインストールされる。それを利用することで、Bashが利用可能になる。※Gitについて・・・Gitとは、開発効率をあげるためのアプリケーションの一つだ。Bashを覚えた次は、このGitの使い方を是非とも覚えてもらいたい。どのような開発でも利用されるくらい一般に広まっているものだ。しかし、今はBashに集中してもらいたいので、詳細な説明は割愛する。
        p それでは、まずはVisual Studio Codeのインストールから説明...しない！私からは説明しない！なぜなら、この手の単純な手順の説明の記事はネットを探せばたくさん出てくるからだ。私がわざわざ、あらためてここで、同じことを説明する必要性は薄い。開発者はみなわからないことがあればネットで検索し自分で答えを拾ってくる。この情報を検索するスキルはどんどん鍛え、場数を踏んでいかなければいけない。検索ができない優秀なエンジニアは存在しないと断言できるほどに、検索するスキルは重要だ。もちろんめんどくさいからという理由もある。めんどくさいに加えて、もうすでにほかの人が説明してくれている記事がある。ならばもう私がここでやる必要は全くない。時間とエネルギーの無駄でしかないのだ。これはただの怠けの正当化ではなく、エンジニアとしての重要な心構えを理解してほしいのだ。ネットの世界は圧倒的に広く、これから自分が作ろうと思った超絶画期的な発明やこんなのあったらいいなあと思うサービスは、幸か不幸か、大概の場合、探せば見つかってしまうのだ。車輪の再発明は積極的に避けていこう。私たちがやるべきことは、それらの偉大な発明を利用し、さらなる偉大な発明を世に送ることだ。
        p とまあ、自分で検索することはとても重要だということをわかってもらえればOKだ。そこで、検索のコツだけは説明しておきたい。それは、「わからないと思ったら、さっさと次の記事を探しに行くこと」だ。どういうことかというと。自分が知りたい情報が書いてそうな記事を見つけたとする。しかし、どういうわけか自分にはちんぷんかんぷで、自分の知りたいことが書いている感じなのだが、よく理解できない。がんばって理解できるように何度も繰り返し読んでみるか。くそう、やっぱりわからない。わたしはなんて馬鹿なんだ。と、1つの記事と、にらめっこし、自信と時間を喪失するのではなく、うーん、わからない。この記事の説明の仕方は、今の私のレベル向けに書かれた説明の仕方じゃないんだな。私のレベル向けに説明してくれている記事を探そう。と、さっさと、次の記事に行くことだ。以下にその理由を上げる
        ul 
            li ちゃんと自分のレベルにあった説明をしてくれている記事を見つけると、スッと理解できる。
            li 複数の記事を横断し、それぞれの違った切り口を自分の中で統合することで、ハッと、理解ができることがある。
            li おれが知りたかったのはこれなんだよっ！！と、ドストライクな記事があったりする。
            li わからないまま、停滞している状態が続くと、精神衛生上よろしくない。モチベーション、気力、体力、集中力の浪費につながる。
            li 説明が上手じゃなかったり、説明している本人が理解しきっていない人が記事を書いている、などのケースはよくある。※記事を書いてくれている人をけなしているのではなく、わからないからといって、無意味に自信を喪失する必要はないということだ。また、プログラミングの概念は実体がなく、説明が難しい部類の領域だと思う。スポーツのように、身体では理解しており、言葉にはできないけどちゃんとできるという人も多いように思う。
        p わからないと思ったらさっさと次へいく。これが鉄則だ。が、しかし、どこを探しても自分の知りたい情報が見当たらないときもまれにある。その時はあきらめてじっくり読み込むか、とりあえずいろいろ触って試行錯誤してみるなど、自分で解決することが必要になってくるが、最終手段だと思ってもらえればいい。もしくは、ネットに情報が少ない技術や領域は、もうすっぱりあきらめるかだ。もっと別の選択肢で解決をはかる、というのも全然ありだ。あまり一般に普及されていない技術を触るというのは中々にハードルが高い行為だ。
        p 説明が長くなってしまったが、それではVisual Studio Codeをインストールしてきてほしい。ちなみにダウンロード先のURLはこれだ
            a(href="https://code.visualstudio.com/Download") 「https://code.visualstudio.com/Download」
            |。ダウンロードするまでの詳細な手順は各自で調べてきてほしい。
        p それでは、同様に、次は「Git」をインストールしてきてほしい。このURLから、ダウンロード先へとたどり着けるはずだ。
            a(href="https://git-scm.com/book/ja/v2/使い始める-Gitのインストール") 「https://git-scm.com/book/ja/v2/使い始める-Gitのインストール」
            |。ダウンロードするまでの詳細な手順は各自で調べてきてほしい。このGitのインストール作業は今の段階ではWindowsの人だけ必須の作業だ。しかし、今の段階で、Macの人がインストールするのも、もちろんOKだ。
        p 上記２つのアプリケーションのインストールが済んだのなら、「開発環境の構築」は完了だ！
    section
        h3 OS（Operating System）について
        p 作業にとりかかる前に、私たちが普段使用しているコンピューターについて、もう少し理解を深めておこう。そもそも、コンピューターはどのような構成要素で成り立っているのか。これを説明するとき、まず、2つの要素に大別することができる。
        ul 
            li ハードウェア・・・モニター、マウス、キーボードなどの事だ。実際に手で触れれるような、実体のある部分全般のこと
            li ソフトウェア・・・ハードウェア以外の、プログラム全般のこと
        p これら2つの要素からコンピューターは構成されている。今、目の前にあるモニターに映っている映像は、ハードウェアであるモニターと、プログラムであるソフトウェアの部分がお互いにうまく連携し、１つの映像を映し出している。これから私たちが、勉強しようとしているのは、主に「ソフトウェア」の領域だ。ハードウェアの説明はこれくらいにとどめておき、ソフトウェアについて深堀していく。ソフトウェアは、さらに大きく分類することができ、下記の3つにわけることができる。
        ul 
            li システムソフトウェア（基本ソフトウェア）・・・
            li ミドルウェア（支援ソフトウェア）・・・何かしらのソフトウェアを開発する際に利用されるソフトウェア。開発で利用されるであろうさまざまな機能を、あらかじめミドルウェアという形で用意しておき、開発しているソフトウェアに組み込むことで、開発する際の時間短縮、品質の向上に役立っている。DBMS、ライブラリ、フレームワーク、エンジン、などと呼ばれるものはこれにあたる。
            li アプリケーションソフトウェア（応用ソフトウェア）・・・普段、「アプリ」と呼んでいるソフトウェアのことである。
        p 